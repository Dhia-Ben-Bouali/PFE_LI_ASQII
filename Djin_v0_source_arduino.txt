#include <WiFi.h>
#include <ESP32Servo.h>
#include <Firebase_ESP_Client.h>
#include <addons/TokenHelper.h>
#include <addons/RTDBHelper.h>
#define WIFI_SSID "Orange-B53E"
#define WIFI_PASSWORD "1AFYR7QB70J"
#define API_KEY "AIzaSyDsMba1SlZqk_uaGMJbutv1VT48SHks93U"
#define DATABASE_URL "djin-2022-default-rtdb.firebaseio.com" //<databaseName>.firebaseio.com or <databaseName>.<region>.firebasedatabase.app
#define USER_EMAIL "contact.asqii@gmail.com"
#define USER_PASSWORD "ASQII@2021"
FirebaseData fbdo;
#include <Adafruit_Fingerprint.h>
#if (defined(__AVR__) || defined(ESP8266)) && !defined(__AVR_ATmega2560__)
 1
SoftwareSerial mySerial(12, 13);

#else

#define mySerial Serial1
/*#define enA 12
#define in2 5*/
#endif

Adafruit_Fingerprint finger = Adafruit_Fingerprint(&mySerial);

uint8_t id;
int test=0;
FirebaseAuth auth;
FirebaseConfig config;
unsigned long sendDataPrevMillis = 0;
unsigned long count = 0;
Servo myServo,myServo1;
String stf;
char data;
const int IN1 = 26;
const int IN3 = 27;
const int ENA = 2;
const int ENB = 4;
void setup(){
  Serial.begin(9600);
  while (!Serial);  // For Yun/Leo/Micro/Zero/...
  delay(100);
  Serial.println("\n\nAdafruit finger detect test");

  Serial.println("\n\nAdafruit Fingerprint sensor enrollment");
  // set the data rate for the sensor serial port
  finger.begin(57600);
  delay(5);
  if (finger.verifyPassword()) {
    Serial.println("Found fingerprint sensor!");
  } else {
    Serial.println("Did not find fingerprint sensor :(");
    while (1) { delay(1); }
  }

    finger.getTemplateCount();

if (finger.templateCount == 0) {
    Serial.print("Sensor doesn't contain any fingerprint data. Please run the 'enroll' example.");
  }
  else {
    Serial.println("Waiting for valid finger...");
      Serial.print("Sensor contains "); Serial.print(finger.templateCount); Serial.println(" templates");
  }
  Serial.println("Setup print done");
  //Serial.println("type 1 do add a finger print or 2 to check");
  myServo.attach(18, 500, 2400);
  myServo1.attach(19, 500, 2400);
  myServo.write(0);
  myServo1.write(0);
  pinMode(25, OUTPUT);
  pinMode (IN1, OUTPUT);
  pinMode (IN3, OUTPUT);
  pinMode (ENA, OUTPUT);
  pinMode (ENB, OUTPUT);
  Serial.begin(115200);
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.print("Connecting to Wi-Fi");
  while (WiFi.status() != WL_CONNECTED)
  {
    Serial.print(".");
    delay(300);
  }
  Serial.println();
  Serial.print("Connected with IP: ");
  Serial.println(WiFi.localIP());
  Serial.println();
  Serial.printf("Firebase Client v%s\n\n", FIREBASE_CLIENT_VERSION);
  config.api_key = API_KEY;
  auth.user.email = USER_EMAIL;
  auth.user.password = USER_PASSWORD;
  config.database_url = DATABASE_URL;
  config.token_status_callback = tokenStatusCallback;
#if defined(ESP8266)
   fbdo.setBSSLBufferSize(2048 /* Rx buffer size in bytes from 512 - 16384 */, 2048 /* Tx buffer size in bytes from 512 - 16384 */);
#endif
  fbdo.setResponseSize(2048);
  Firebase.begin(&config, &auth);
  Firebase.reconnectWiFi(true);
  Firebase.setDoubleDigits(5);
  config.timeout.serverResponse = 10 * 1000;
}

//*********************************************************start functions************************************************************************************



  uint8_t readnumber(void) {
    uint8_t num = 0;

    while (num == 0) {
      while (! Serial.available());
      num = Serial.parseInt();
    }
    return num;
  }

//-------------------------------------------------------------------------------

  uint8_t getFingerprintEnroll() {
    test = 0;
    int p = -1;
    Serial.print("Waiting for valid finger to enroll as #"); Serial.println(id);
    while (p != FINGERPRINT_OK) {
      p = finger.getImage();
      switch (p) {
      case FINGERPRINT_OK:
        Serial.println("Image taken");
        break;
      case FINGERPRINT_NOFINGER:
        Serial.print(".");
        break;
      case FINGERPRINT_PACKETRECIEVEERR:
        Serial.println("Communication error");
        break;
      case FINGERPRINT_IMAGEFAIL:
        Serial.println("Imaging error");
        break;
      default:
        Serial.println("Unknown error");
        break;
      }
    }

    // OK success!

    p = finger.image2Tz(1);
    switch (p) {
      case FINGERPRINT_OK:
        Serial.println("Image converted");
        break;
      case FINGERPRINT_IMAGEMESS:
        Serial.println("Image too messy");
        return p;
      case FINGERPRINT_PACKETRECIEVEERR:
        Serial.println("Communication error");
        return p;
      case FINGERPRINT_FEATUREFAIL:
        Serial.println("Could not find fingerprint features");
        return p;
      case FINGERPRINT_INVALIDIMAGE:
        Serial.println("Could not find fingerprint features");
        return p;
      default:
        Serial.println("Unknown error");
        return p;
    }

    Serial.println("Remove finger");
    delay(2000);
    p = 0;
    while (p != FINGERPRINT_NOFINGER) {
      p = finger.getImage();
    }
    Serial.print("ID "); Serial.println(id);
    p = -1;
    Serial.println("Place same finger again");
    while (p != FINGERPRINT_OK) {
      p = finger.getImage();
      switch (p) {
      case FINGERPRINT_OK:
        Serial.println("Image taken");
        break;
      case FINGERPRINT_NOFINGER:
        Serial.print(".");
        break;
      case FINGERPRINT_PACKETRECIEVEERR:
        Serial.println("Communication error");
        break;
      case FINGERPRINT_IMAGEFAIL:
        Serial.println("Imaging error");
        break;
      default:
        Serial.println("Unknown error");
        break;
      }
    }

    // OK success!

    p = finger.image2Tz(2);
    switch (p) {
      case FINGERPRINT_OK:
        Serial.println("Image converted");
        break;
      case FINGERPRINT_IMAGEMESS:
        Serial.println("Image too messy");
        return p;
      case FINGERPRINT_PACKETRECIEVEERR:
        Serial.println("Communication error");
        return p;
      case FINGERPRINT_FEATUREFAIL:
        Serial.println("Could not find fingerprint features");
        return p;
      case FINGERPRINT_INVALIDIMAGE:
        Serial.println("Could not find fingerprint features");
        return p;
      default:
        Serial.println("Unknown error");
        return p;
    }

    // OK converted!
    Serial.print("Creating model for #");  Serial.println(id);

    p = finger.createModel();
    if (p == FINGERPRINT_OK) {
      Serial.println("Prints matched!");
    } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
      Serial.println("Communication error");
      return p;
    } else if (p == FINGERPRINT_ENROLLMISMATCH) {
      Serial.println("Fingerprints did not match");
      return p;
    } else {
      Serial.println("Unknown error");
      return p;
    }

    Serial.print("ID "); Serial.println(id);
    p = finger.storeModel(id);
    if (p == FINGERPRINT_OK) {
      Serial.println("Stored!");
    } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
      Serial.println("Communication error");
      return p;
    } else if (p == FINGERPRINT_BADLOCATION) {
      Serial.println("Could not store in that location");
      return p;
    } else if (p == FINGERPRINT_FLASHERR) {
      Serial.println("Error writing to flash");
      return p;
    } else {
      Serial.println("Unknown error");
      return p;
    }
    return true;
  }

//---------------------------------------------------------------------------------------------


uint8_t getFingerprintID() {
  test = 0;
  uint8_t p = -1;
  Serial.println("Waiting for a finger");
  while (p != FINGERPRINT_OK) {
    Serial.print(".");
    p = finger.getImage();
    switch (p) {
      case FINGERPRINT_OK:
        Serial.println("Image taken");
        break;
    }
  }
    // OK success!

    p = finger.image2Tz();
    switch (p) {
      case FINGERPRINT_OK:
        Serial.println("Image converted");
        break;
      case FINGERPRINT_IMAGEMESS:
        Serial.println("Image too messy");
        return p;
      case FINGERPRINT_PACKETRECIEVEERR:
        Serial.println("Communication error");
        return p;
      case FINGERPRINT_FEATUREFAIL:
        Serial.println("Could not find fingerprint features");
        return p;
      case FINGERPRINT_INVALIDIMAGE:
        Serial.println("Could not find fingerprint features");
        return p;
      default:
        Serial.println("Unknown error");
        return p;
    }

    // OK converted!
    p = finger.fingerSearch();
    if (p == FINGERPRINT_OK) {
      Serial.println("Found a print match!");
    //******************
      Serial.println("9bilnek");
    //********************
    } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
      Serial.println("Communication error");
      return p;
    } else if (p == FINGERPRINT_NOTFOUND) {
      Serial.println("Did not find a match");
    //******************
      Serial.println("Ma9bilnekich");
    //********************
      return p;
    } else {
      Serial.println("Unknown error");
      return p;
    }

    // found a match!
    Serial.print("Found ID #"); Serial.print(finger.fingerID);
    Serial.print(" with confidence of "); Serial.println(finger.confidence);

    return finger.fingerID;
  }


  // returns -1 if failed, otherwise returns ID #
  int getFingerprintIDez() {
    uint8_t p = finger.getImage();
    if (p != FINGERPRINT_OK)  return -1;

    p = finger.image2Tz();
    if (p != FINGERPRINT_OK)  return -1;

    p = finger.fingerFastSearch();
    if (p != FINGERPRINT_OK)  return -1;

    // found a match!
    Serial.print("Found ID #"); Serial.print(finger.fingerID);
    Serial.print(" with confidence of "); Serial.println(finger.confidence);
    return finger.fingerID;
  }

//********************************************************************end functions**********************************************************************
void serv_on(){
    myServo.write(0);
}
void serv_off(){
    myServo.write(180);
}
void serv1_on(){
    myServo1.write(0);
}
void serv1_off(){
    myServo1.write(90);
}
void lock1open(){
  analogWrite(ENA, 255);
  analogWrite(ENB, 255);
  digitalWrite(IN1, 1);
  digitalWrite(IN3, 0);
 }
void lock1close()
{
  analogWrite(ENB, 255);
  analogWrite(ENA, 255);
  digitalWrite(IN1, 0);
  digitalWrite(IN3, 0);
}
  void lock2open()
{
  analogWrite(ENA, 255);
  analogWrite(ENB, 255);
  digitalWrite(IN1, 0);
  digitalWrite(IN3, 1);
}
void lock2close()
{
  analogWrite(ENB, 255);
  analogWrite(ENA, 255);
  digitalWrite(IN1, 0);
  digitalWrite(IN3, 0);
}
void loop()
{
  if (Firebase.ready() && (millis() - sendDataPrevMillis > 1000 || sendDataPrevMillis == 0))
  {
    sendDataPrevMillis = millis();
   stf = Firebase.RTDB.getString(&fbdo, F("/test/string")) ? fbdo.to<const char *>() : fbdo.errorReason().c_str();
   print = Firebase.RTDB.getString(&fbdo, F("/test1/string")) ? fbdo.to<const char *>() : fbdo.errorReason().c_str();
   Serial.println(stf);
   FirebaseJson json;
   Serial.println();
   }
if ( stf=="on")
{
  digitalWrite(25, HIGH);
  delay(100);
  stf="off";
  Serial.printf("Set string... %s\n", Firebase.RTDB.setString(&fbdo, F("/test/string"), F("off")) ? "ok" : fbdo.errorReason().c_str());
}
if ( stf=="down")
{
  digitalWrite(25, LOW);
  delay(100);
  stf="off";
  Serial.printf("Set string... %s\n", Firebase.RTDB.setString(&fbdo, F("/test/string"), F("off")) ? "ok" : fbdo.errorReason().c_str());
}
data = stf[0];
switch(data){
    case'a':
   lock1open();
    stf="off";
  Serial.printf("Set string... %s\n", Firebase.RTDB.setString(&fbdo, F("/test/string"), F("off")) ? "ok" : fbdo.errorReason().c_str());
        break;
    case'b':
   lock1close();
   serv1_off();
   stf="off";
  Serial.printf("Set string... %s\n", Firebase.RTDB.setString(&fbdo, F("/test/string"), F("off")) ? "ok" : fbdo.errorReason().c_str());
        break;
        case'c':
        serv1_on();
   lock2open();
    stf="off";
  Serial.printf("Set string... %s\n", Firebase.RTDB.setString(&fbdo, F("/test/string"), F("off")) ? "ok" : fbdo.errorReason().c_str());
        break;
    case 'd':
   lock2close();
    stf="off";
  Serial.printf("Set string... %s\n", Firebase.RTDB.setString(&fbdo, F("/test/string"), F("off")) ? "ok" : fbdo.errorReason().c_str());
        break;
    case 'e':
        serv_on();
         stf="off";
  Serial.printf("Set string... %s\n", Firebase.RTDB.setString(&fbdo, F("/test/string"), F("off")) ? "ok" : fbdo.errorReason().c_str());
      break;
      case 'f':
        serv_off();
         stf="off";
  Serial.printf("Set string... %s\n", Firebase.RTDB.setString(&fbdo, F("/test/string"), F("off")) ? "ok" : fbdo.errorReason().c_str());
      break;
    }

    if(print=='g'){
          // statements for value2*************************************************
        getFingerprintID();
        delay(50);
          // statements for value2************************************************* 
        Serial.printf("Set string... %s\n", Firebase.RTDB.setString(&fbdo, F("/test1/string"), F("off")) ? "ok" : fbdo.errorReason().c_str());
    }
        if(print=='h'){
          // statements for value1*************************************************
          Serial.println("Ready to enroll a fingerprint!");
          Serial.println("Please type in the ID # (from 1 to 127) you want to save this finger as...");
          id = readnumber();
          if (id == 0) {// ID #0 not allowed, try again!
            return;
          }
          Serial.print("Enrolling ID #");
          Serial.println(id);
          while (!  getFingerprintEnroll() );
          break;
            // statements for value1*************************************************
          Serial.printf("Set string... %s\n", Firebase.RTDB.setString(&fbdo, F("/test1/string"), F("off")) ? "ok" : fbdo.errorReason().c_str());
    }

}
